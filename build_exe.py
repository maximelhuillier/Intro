#!/usr/bin/env python3
"""
Script pour cr√©er un ex√©cutable Windows (.exe) d'AnalystHelper
Utilise PyInstaller pour cr√©er un fichier .exe standalone
"""

import os
import sys
import subprocess
from pathlib import Path


def check_pyinstaller():
    """V√©rifie si PyInstaller est install√©"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller est install√©")
        return True
    except ImportError:
        print("‚ùå PyInstaller n'est pas install√©")
        print("\nüì¶ Installation de PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller install√© avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de l'installation : {e}")
            print("\nInstallez manuellement avec : pip install pyinstaller")
            return False


def create_exe():
    """Cr√©e l'ex√©cutable avec PyInstaller"""
    print("\nüî® Cr√©ation de l'ex√©cutable...\n")

    # Param√®tres PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                          # Un seul fichier exe
        "--windowed",                         # Pas de console (interface graphique)
        "--name=AnalystHelper",               # Nom de l'exe
        "--icon=NONE",                        # Pas d'ic√¥ne (ou sp√©cifier un .ico)
        "--clean",                            # Nettoyer avant de build
        "--add-data=analyst_helper;analyst_helper",  # Inclure le package
        "analyst_helper_gui.py"               # Script principal
    ]

    # Sur Windows, le s√©parateur est diff√©rent
    if sys.platform == 'win32':
        cmd[6] = "--add-data=analyst_helper;analyst_helper"
    else:
        cmd[6] = "--add-data=analyst_helper:analyst_helper"

    try:
        result = subprocess.run(cmd, check=True)

        print("\n" + "=" * 60)
        print("‚úÖ EX√âCUTABLE CR√â√â AVEC SUCC√àS")
        print("=" * 60)
        print("\nüìÇ L'ex√©cutable se trouve dans : dist/AnalystHelper.exe")
        print("\nüí° Vous pouvez distribuer ce fichier .exe √† vos coll√®gues.")
        print("   Ils n'auront pas besoin de Python install√© !")
        print("\nüìù Instructions pour vos coll√®gues :")
        print("   1. Double-cliquer sur AnalystHelper.exe")
        print("   2. S√©lectionner le dossier √† analyser")
        print("   3. Cliquer sur 'Lancer l'Analyse'")
        print("   4. Ouvrir le rapport HTML g√©n√©r√©")

    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors de la cr√©ation : {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        return False

    return True


def main():
    """Fonction principale"""
    print("=" * 60)
    print("üèóÔ∏è  CR√âATION D'UN EX√âCUTABLE WINDOWS (.exe)")
    print("=" * 60)
    print("\nCet outil va cr√©er un fichier .exe que vos coll√®gues")
    print("pourront utiliser SANS avoir Python install√© !")

    # V√©rifier PyInstaller
    if not check_pyinstaller():
        return

    # V√©rifier que le fichier GUI existe
    if not Path("analyst_helper_gui.py").exists():
        print("\n‚ùå Fichier analyst_helper_gui.py introuvable")
        return

    # Cr√©er l'exe
    if create_exe():
        print("\n‚úÖ Termin√© !")
    else:
        print("\n‚ùå √âchec de la cr√©ation")


if __name__ == "__main__":
    main()
