#!/usr/bin/env python3
"""
Tests rapides pour v√©rifier que AnalystHelper fonctionne
"""

import os
import tempfile
from pathlib import Path


def test_imports():
    """Test 1 : V√©rifier que tous les modules peuvent √™tre import√©s"""
    print("Test 1 : Import des modules...")
    try:
        from analyst_helper import FolderScanner, FileClassifier, HTMLReporter
        print("   ‚úÖ Imports r√©ussis")
        return True
    except ImportError as e:
        print(f"   ‚ùå Erreur d'import : {e}")
        return False


def test_scanner():
    """Test 2 : Tester le scanner de dossiers"""
    print("\nTest 2 : Scanner de dossiers...")
    try:
        from analyst_helper import FolderScanner

        # Cr√©er un dossier temporaire avec des fichiers
        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er quelques fichiers de test
            (Path(tmpdir) / "test1.pdf").write_text("test")
            (Path(tmpdir) / "test2.txt").write_text("test")

            # Scanner
            scanner = FolderScanner(tmpdir)
            files = scanner.scan()

            if len(files) >= 2:
                print(f"   ‚úÖ Scanner OK - {len(files)} fichiers trouv√©s")
                return True
            else:
                print(f"   ‚ùå Scanner : {len(files)} fichiers trouv√©s (attendu >= 2)")
                return False

    except Exception as e:
        print(f"   ‚ùå Erreur scanner : {e}")
        return False


def test_classifier():
    """Test 3 : Tester le classificateur"""
    print("\nTest 3 : Classificateur...")
    try:
        from analyst_helper import FolderScanner, FileClassifier

        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er des fichiers
            (Path(tmpdir) / "doc.pdf").write_text("test")
            (Path(tmpdir) / "data.xlsx").write_text("test")

            # Scanner
            scanner = FolderScanner(tmpdir)
            files = scanner.scan()

            # Classifier
            output_dir = Path(tmpdir) / "output"
            classifier = FileClassifier(str(output_dir))
            results = classifier.classify_all(files, copy=True)

            if len(results) >= 2:
                print(f"   ‚úÖ Classificateur OK - {len(results)} fichiers classifi√©s")
                return True
            else:
                print(f"   ‚ùå Classificateur : {len(results)} fichiers (attendu >= 2)")
                return False

    except Exception as e:
        print(f"   ‚ùå Erreur classificateur : {e}")
        return False


def test_reporter():
    """Test 4 : Tester le g√©n√©rateur de rapports"""
    print("\nTest 4 : G√©n√©rateur de rapports HTML...")
    try:
        from analyst_helper import FolderScanner, HTMLReporter

        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er des fichiers
            (Path(tmpdir) / "test.pdf").write_text("test")

            # Scanner
            scanner = FolderScanner(tmpdir)
            files = scanner.scan()

            # G√©n√©rer le rapport
            report_path = Path(tmpdir) / "test_report.html"
            reporter = HTMLReporter(str(report_path))
            reporter.generate_report(files=files, title="Test Report")

            if report_path.exists() and report_path.stat().st_size > 1000:
                print(f"   ‚úÖ Rapport HTML OK - {report_path.stat().st_size} bytes")
                return True
            else:
                print("   ‚ùå Rapport HTML : fichier trop petit ou absent")
                return False

    except Exception as e:
        print(f"   ‚ùå Erreur rapport : {e}")
        return False


def test_extractor():
    """Test 5 : Tester l'extracteur (optionnel)"""
    print("\nTest 5 : Extracteur de pi√®ces jointes...")
    try:
        from analyst_helper import AttachmentExtractor
        print("   ‚úÖ Module extractor import√©")
        print("   ‚ÑπÔ∏è  Test complet n√©cessite des fichiers .msg")
        return True
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  Module extract-msg non install√© : {e}")
        print("      Installation : pip install extract-msg")
        return False


def main():
    """Ex√©cute tous les tests"""
    print("=" * 60)
    print("TESTS ANALYST HELPER")
    print("=" * 60)

    results = []
    results.append(("Imports", test_imports()))
    results.append(("Scanner", test_scanner()))
    results.append(("Classificateur", test_classifier()))
    results.append(("Reporter", test_reporter()))
    results.append(("Extracteur", test_extractor()))

    # R√©sum√©
    print("\n" + "=" * 60)
    print("R√âSUM√â DES TESTS")
    print("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {name}")

    print(f"\nR√©sultat : {passed}/{total} tests r√©ussis")

    if passed == total:
        print("\nüéâ Tous les tests sont pass√©s ! AnalystHelper est pr√™t.")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

    return passed == total


if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
