#!/usr/bin/env python3
"""
Exemple simple d'utilisation d'AnalystHelper
Pour les utilisateurs qui veulent un script rapide √† personnaliser
"""

from analyst_helper import FolderScanner, HTMLReporter

# ============================================
# CONFIGURATION - Modifiez ces valeurs
# ============================================

# Dossier √† analyser
TARGET_FOLDER = "."  # Dossier actuel, ou sp√©cifiez un chemin : "/chemin/vers/dossier"

# Fichier de sortie pour le rapport
OUTPUT_REPORT = "mon_rapport.html"

# Dossiers √† exclure du scan
EXCLUDE_FOLDERS = [
    "node_modules",
    ".git",
    "__pycache__",
    "venv",
    "analyst_output"
]

# ============================================
# EX√âCUTION
# ============================================

def main():
    print("üîç AnalystHelper - Exemple Simple\n")

    # 1. Scanner le dossier
    print(f"üìÅ Scan du dossier : {TARGET_FOLDER}")
    scanner = FolderScanner(TARGET_FOLDER)
    files = scanner.scan(exclude_folders=EXCLUDE_FOLDERS)

    # 2. Afficher les statistiques
    print(f"\n‚úÖ Scan termin√© :")
    print(f"   - {scanner.stats['total_files']} fichiers trouv√©s")
    print(f"   - {scanner.stats['total_size_mb']:.2f} MB")

    # Afficher la r√©partition par type
    print("\nüìä R√©partition par type :")
    for file_type, count in scanner.stats['by_type'].items():
        print(f"   - {file_type}: {count}")

    # 3. G√©n√©rer le rapport HTML
    print(f"\nüìÑ G√©n√©ration du rapport : {OUTPUT_REPORT}")
    reporter = HTMLReporter(OUTPUT_REPORT)
    reporter.generate_report(
        files=files,
        stats=scanner.stats,
        title="Mon Rapport d'Analyse"
    )

    print(f"\n‚úÖ Termin√© ! Ouvrez {OUTPUT_REPORT} dans votre navigateur\n")


if __name__ == "__main__":
    main()
